<!DOCTYPE html><html lang="en" class="h-full"><head><meta charSet="utf-8"/><title>Create, render, and automate tasks with Metafields</title><meta name="description" content="Learn how to use metafields to create and render information and leverage Shopify Flow to automate tasks."/><meta name="viewport" content="width=device-width,initial-scale=1"/><meta property="og:type" content="website"/><meta property="og:image" content="https://workshops.shopify.dev/social-share-preview.jpg"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:image" content="https://workshops.shopify.dev/social-share-preview.jpg"/><meta name="twitter:creator" content="@ShopifyDevs"/><link rel="stylesheet" href="/build/_assets/tailwind-OSF3KDF6.css"/><link rel="stylesheet" href="/build/_assets/workshops-IXG5EJLE.css"/><link rel="stylesheet" href="/build/_assets/agate-YFU2QRW6.css"/></head><body class="h-full bg-slate-50"><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-86JJCZ26ZM"></script><script async="" id="gtag-init">
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
              </script><main><div class="workshop flex h-full w-full flex-row justify-between gap-0"><header class="fixed top-0 left-0 right-0 z-[2] flex flex-row-reverse items-center justify-end bg-white p-4 drop-shadow-md md:justify-between"><div class="hidden md:block timer"><p>45<!-- --> minutes remaining</p></div><h1>Create, render, and automate tasks with Metafields</h1><button class="btn-icon md:hidden" aria-label="Open step navigation"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-6 w-6"><path fill-rule="evenodd" d="M3 6.75A.75.75 0 013.75 6h16.5a.75.75 0 010 1.5H3.75A.75.75 0 013 6.75zM3 12a.75.75 0 01.75-.75h16.5a.75.75 0 010 1.5H3.75A.75.75 0 013 12zm0 5.25a.75.75 0 01.75-.75h16.5a.75.75 0 010 1.5H3.75a.75.75 0 01-.75-.75z" clip-rule="evenodd"></path></svg></button><a class="btn-icon hidden md:block" arial-label="Go back to workshops" href="/"><svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="h-5 w-5"><path d="M19 9H3.661l5.997-5.246a1 1 0 00-1.316-1.506l-8 7c-.008.007-.011.018-.019.025a.975.975 0 00-.177.24c-.018.03-.045.054-.059.087a.975.975 0 000 .802c.014.033.041.057.059.088.05.087.104.17.177.239.008.007.011.018.019.025l8 7a.996.996 0 001.411-.095 1 1 0 00-.095-1.411L3.661 11H19a1 1 0 000-2z"></path></svg></a></header>
<div class="workshop-nav flex shrink-0 flex-col gap-2 bg-slate-50"><a class="flex select-none items-center rounded-md px-4 pb-2 leading-snug md:hidden" href="/"><svg width="8.4" height="12" viewBox="0 0 7 10" fill="none" xmlns="http://www.w3.org/2000/svg" focusable="false" aria-hidden="true"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.30326 0.403358C5.108 0.208096 4.79142 0.208096 4.59615 0.403358L1.06062 3.93889L0.353513 4.646C0.158251 4.84126 0.158251 5.15784 0.353513 5.35311L1.06062 6.06021L4.59615 9.59575C4.79142 9.79101 5.108 9.79101 5.30326 9.59575L6.01037 8.88864C6.20563 8.69338 6.20563 8.37679 6.01037 8.18153L2.82839 4.99955L6.01037 1.81757C6.20563 1.62231 6.20563 1.30573 6.01037 1.11046L5.30326 0.403358Z" fill="currentColor"></path></svg><span class="pl-2">Workshops</span></a><hr class="md:hidden"/><div class="flex select-none items-center rounded-md py-4 px-4 leading-snug md:hidden timer"><p>45<!-- --> minutes remaining</p></div><a href="#0" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug font-medium"><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-emerald-500">1</span>Before you begin</a><a href="#1" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug "><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-slate-400">2</span>What are Metafields?</a><a href="#2" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug "><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-slate-400">3</span>Show metafield data in the online store</a><a href="#3" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug "><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-slate-400">4</span>Use GraphiQL to create metafield definitions</a><a href="#4" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug "><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-slate-400">5</span>Build Shopify Flow automation that reads metafields</a><a href="#5" class="flex select-none items-center rounded-md border border-solid border-gray-200 bg-white py-4 px-4 leading-snug "><span class="mr-4 flex h-6 w-6 flex-none items-center justify-center rounded-full  text-[0.8rem] leading-6 text-white bg-slate-400">6</span>Conclusion</a></div><div class="backdrop fixed inset-0"></div>
<div class="slider-wrapper"><div class="slider-panel"><div class="workshop-step"><section><h2 id="0">Before you begin</h2><p>Metafields are a flexible way for your app to add and store additional information about a Shopify resource, such as a product. The additional information stored in metafields can be almost anything related to a resource, such as size charts, downloadable documents, release dates, images, or part numbers. Merchants and other apps can retrieve and edit the data that&#x27;s stored in metafields from the Shopify admin. You can also access metafields in themes using Liquid and through the Storefront API.</p><p>This workshop will cover how to create a new <a href="https://shopify.dev/apps/metafields">Metafield</a> and how to render metafield definitions to the online store. We will start by creating a new Metafield from the Shopify Admin and then using GraphiQL. Finally we&#x27;ll use Shopify Flow to create automation that&#x27;s triggered based on information in a metafield.</p><p>By the end of this workshop, attendees will have created three metafield definitions and a worklow to automate sending an email when an order is placed.</p><p><img src="/content/images/optimized/metafields-render-automate/flow-complete-dashboard.jpg" alt="An image showing a workflow in Shopify Flow"/></p><h3>What you&#x27;ll need</h3><ul>
<li>Create a <a href="https://www.shopify.com/partners">Shopify partner account</a></li>
<li>Create a <a href="https://shopify.dev/docs/apps/tools/development-stores#create-a-development-store-to-test-your-app">development store with pre-populated data</a></li>
<li>Set up the <a href="https://help.shopify.com/en/manual/checkout-settings/test-orders">Bogus Payment Gateway</a></li>
</ul><h3>Learning objectives</h3><p>After you&#x27;ve finished this tutorial, you&#x27;ll have accomplished the following:</p><ul>
<li>Created three types of metafield definitions.</li>
<li>Used the code editor to update Liquid templates to render metafield definitions.</li>
<li>Used GraphiQL to create a metafield definition.</li>
<li>Built automation that uses metafields in Shopify Flow.</li>
</ul></section></div></div><div class="slider-controls"><button class="slider-control btn btn-small btn-tertiary-outline prev shadow-md invisible" disabled="">Back</button><button class="slider-control btn btn-small btn-tertiary next shadow-md ">Next</button></div></div></div></main><script>((STORAGE_KEY, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key = Math.random().toString(32).slice(2);
      window.history.replaceState({
        key
      }, "");
    }
    try {
      let positions = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || "{}");
      let storedY = positions[restoreKey || window.history.state.key];
      if (typeof storedY === "number") {
        window.scrollTo(0, storedY);
      }
    } catch (error) {
      console.error(error);
      sessionStorage.removeItem(STORAGE_KEY);
    }
  })("positions", null)</script><link rel="modulepreload" href="/build/entry.client-J6TYPMOL.js"/><link rel="modulepreload" href="/build/_shared/chunk-YZBVNK3V.js"/><link rel="modulepreload" href="/build/_shared/chunk-SH7JW3YP.js"/><link rel="modulepreload" href="/build/_shared/chunk-GDLBX7ER.js"/><link rel="modulepreload" href="/build/_shared/chunk-Q3IECNXJ.js"/><link rel="modulepreload" href="/build/_shared/chunk-JOBPDGDE.js"/><link rel="modulepreload" href="/build/_shared/chunk-MV3Y6IQI.js"/><link rel="modulepreload" href="/build/root-TS7GWK7I.js"/><link rel="modulepreload" href="/build/routes/workshops-YWZAAF22.js"/><link rel="modulepreload" href="/build/_shared/chunk-4QTFVEPO.js"/><link rel="modulepreload" href="/build/routes/workshops/$workshopId-TCVFMZD7.js"/><script>window.__remixContext = {"url":"/workshops/metafields-render-automate","state":{"loaderData":{"root":{"trackingEnabled":true},"routes/workshops/$workshopId":{"workshopId":"metafields-render-automate","code":"var Component=(()=\u003e{var p=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=\u003e{for(var a in e)o(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,l)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let n of u(e))!g.call(t,n)\u0026\u0026n!==a\u0026\u0026o(t,n,{get:()=\u003ee[n],enumerable:!(l=m(e,n))||l.enumerable});return t};var j=(t,e,a)=\u003e(a=t!=null?p(f(t)):{},s(e||!t||!t.__esModule?o(a,\"default\",{value:t,enumerable:!0}):a,t)),N=t=\u003es(o({},\"__esModule\",{value:!0}),t);var d=w((T,r)=\u003e{r.exports=_jsx_runtime});var k={};y(k,{default:()=\u003eS,frontmatter:()=\u003eb});var i=j(d()),b={summary:\"Learn how to use metafields to create and render information and leverage Shopify Flow to automate tasks.\",id:\"metafields-render-automate\",status:\"Published\",categories:\"shopify\",\"feedback-link\":\"https://github.com/Shopify/workshops\"};function h(t){let e=Object.assign({timer:\"timer\",h1:\"h1\",nav:\"nav\",\"workshop-steps\":\"workshop-steps\",div:\"div\",section:\"section\",h2:\"h2\",p:\"p\",a:\"a\",img:\"img\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",pre:\"pre\",code:\"code\",dl:\"dl\",dt:\"dt\",dd:\"dd\",em:\"em\",span:\"span\",h4:\"h4\"},t.components),a=e[\"workshop-steps\"],{WorkshopHeader:l,WorkshopNavLink:n}=e;return l||c(\"WorkshopHeader\",!0),n||c(\"WorkshopNavLink\",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(l,{children:[(0,i.jsx)(e.timer,{cssClass:\"hidden md:block\",children:'{\"total\":45,\"stepsDuration\":{\"1\":4,\"2\":5,\"3\":15,\"4\":10,\"5\":10,\"6\":1},\"countDown\":[]}'}),(0,i.jsx)(e.h1,{children:\"Create, render, and automate tasks with Metafields\"})]}),`\n`,(0,i.jsxs)(e.nav,{children:[(0,i.jsx)(e.timer,{cssClass:\"flex select-none items-center rounded-md py-4 px-4 leading-snug md:hidden\",children:'{\"total\":45,\"stepsDuration\":{\"1\":4,\"2\":5,\"3\":15,\"4\":10,\"5\":10,\"6\":1},\"countDown\":[]}'}),(0,i.jsx)(n,{stepStr:\"0\",children:\"Before you begin\"}),(0,i.jsx)(n,{stepStr:\"1\",children:\"What are Metafields?\"}),(0,i.jsx)(n,{stepStr:\"2\",children:\"Show metafield data in the online store\"}),(0,i.jsx)(n,{stepStr:\"3\",children:\"Use GraphiQL to create metafield definitions\"}),(0,i.jsx)(n,{stepStr:\"4\",children:\"Build Shopify Flow automation that reads metafields\"}),(0,i.jsx)(n,{stepStr:\"5\",children:\"Conclusion\"})]}),`\n`,(0,i.jsxs)(a,{children:[(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"0\",children:\"Before you begin\"}),(0,i.jsx)(e.p,{children:\"Metafields are a flexible way for your app to add and store additional information about a Shopify resource, such as a product. The additional information stored in metafields can be almost anything related to a resource, such as size charts, downloadable documents, release dates, images, or part numbers. Merchants and other apps can retrieve and edit the data that's stored in metafields from the Shopify admin. You can also access metafields in themes using Liquid and through the Storefront API.\"}),(0,i.jsxs)(e.p,{children:[\"This workshop will cover how to create a new \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/apps/metafields\",children:\"Metafield\"}),\" and how to render metafield definitions to the online store. We will start by creating a new Metafield from the Shopify Admin and then using GraphiQL. Finally we'll use Shopify Flow to create automation that's triggered based on information in a metafield.\"]}),(0,i.jsx)(e.p,{children:\"By the end of this workshop, attendees will have created three metafield definitions and a worklow to automate sending an email when an order is placed.\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-complete-dashboard.jpg\",alt:\"An image showing a workflow in Shopify Flow\"})}),(0,i.jsx)(e.h3,{children:\"What you'll need\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Create a \",(0,i.jsx)(e.a,{href:\"https://www.shopify.com/partners\",children:\"Shopify partner account\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Create a \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/docs/apps/tools/development-stores#create-a-development-store-to-test-your-app\",children:\"development store with pre-populated data\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Set up the \",(0,i.jsx)(e.a,{href:\"https://help.shopify.com/en/manual/checkout-settings/test-orders\",children:\"Bogus Payment Gateway\"})]}),`\n`]}),(0,i.jsx)(e.h3,{children:\"Learning objectives\"}),(0,i.jsx)(e.p,{children:\"After you've finished this tutorial, you'll have accomplished the following:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Created three types of metafield definitions.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Used the code editor to update Liquid templates to render metafield definitions.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Used GraphiQL to create a metafield definition.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Built automation that uses metafields in Shopify Flow.\"}),`\n`]})]})}),(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"1\",children:\"What are Metafields?\"}),(0,i.jsx)(e.p,{children:\"Metafields enable you to customize the functionality and appearance of your Shopify store by letting you save specialized information that isn't usually captured in the Shopify admin. You can use Metafields for internal tracking, or to display specialized information on your online store in a variety of ways.\"}),(0,i.jsx)(e.p,{children:\"For example, a candle seller might want to display a burn time for candles on their product pages, while a grocery store might want to display a product expiration date for canned goods. Other examples of specialized information include the following:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"part numbers\"}),`\n`,(0,i.jsx)(e.li,{children:\"color swatches\"}),`\n`,(0,i.jsx)(e.li,{children:\"launch dates\"}),`\n`,(0,i.jsx)(e.li,{children:\"related products\"}),`\n`,(0,i.jsx)(e.li,{children:\"blog post summaries\"}),`\n`,(0,i.jsx)(e.li,{children:\"files for download\"}),`\n`,(0,i.jsx)(e.li,{children:\"lists of ingredients\"}),`\n`]}),(0,i.jsxs)(e.p,{children:[\"You can add Metafields to your \",(0,i.jsx)(e.strong,{children:\"products\"}),\", \",(0,i.jsx)(e.strong,{children:\"collections\"}),\", \",(0,i.jsx)(e.strong,{children:\"customers\"}),\", \",(0,i.jsx)(e.strong,{children:\"orders\"}),\", and other parts of your store, either directly from your Shopify admin or by using the Shopify API.\"]}),(0,i.jsx)(e.h3,{children:\"Metafield structure\"}),(0,i.jsx)(e.p,{children:\"A metafield includes the following parts:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Namespace\"}),\": A container for a group of metafields. Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Key\"}),\": The name for the metafield.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Type\"}),\": The type of data that the metafield stores.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Value\"}),\": The data to store in the metafield. The value is always stored as a string, regardless of the metafield's type.\"]}),`\n`]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/metafield-breakdown.jpg\",alt:\"Breakdown of a metafield definition.\"})}),(0,i.jsx)(e.h3,{children:\"Metafields in Liquid\"}),(0,i.jsx)(e.p,{children:\"By adding and storing additional information about Shopify resources like products and collections. With the release of Online Store 2.0, metafields are now supported natively, for page resources that render with JSON templates.\"}),(0,i.jsx)(e.p,{children:\"Metafields are accessible as Liquid objects in themes, by wrapping the full definition in curly brackets, like a typical Liquid object, along with value. For example if we add the snippet below to a theme project we can view the instructions value for the current product\"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"hljs language-html\",children:`{{ product.metafields.my_fields.instructions.value }}\n`})}),(0,i.jsx)(e.p,{children:\"Having access to metafields within Liquid opens up a deeper level of flexibility to display custom rich content on storefronts.\"}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Positive\"}),(0,i.jsxs)(e.dd,{children:[\"More information about Metafields and Liquid can be found \",(0,i.jsx)(e.a,{href:\"https://www.shopify.ca/partners/blog/metafields\",children:\"here\"}),\".\"]})]})]})}),(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"2\",children:\"Show metafield data in the online store\"}),(0,i.jsxs)(e.p,{children:[\"In this section, we will create a metafield definition in the Shopify store admin, assign a metafield to a product, and format the frontend output using \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/liquid\",children:\"Liquid\"}),\", Shopify's templating language. You will learn what's required to create a metafield definition and how to modify a Shopify theme to render the metafield content in the online store.\"]}),(0,i.jsx)(e.h3,{children:\"Step 1: Creating the metafield definition\"}),(0,i.jsxs)(e.p,{children:[\"Metafield definitions can be configured using the Shopify admin. To do so, navigate to the \",(0,i.jsx)(e.em,{children:\"Settings\"}),\" menu and choose the \",(0,i.jsx)(e.em,{children:\"Metafields\"}),\" option. When you click on \",(0,i.jsx)(e.em,{children:\"Products\"}),\", you will see an overview of all available metafields that are available for the product resource.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/metafields-products-menu.jpg\",alt:\"The Metafields menu in the Shopify Admin.\"})}),(0,i.jsxs)(e.p,{children:[\"Click on \",(0,i.jsx)(e.em,{children:\"Add definition\"}),\" to begin creating a new metafield definition with the following properties:\"]}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Name\"}),\": Choose a value that lets you identify the definition easily in the future. In this example, we will use \",(0,i.jsx)(e.code,{children:\"Special image\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Namespace\"}),\" and \",(0,i.jsx)(e.strong,{children:\"key\"}),\": This is the internal identifier for this metafield definition. In this example, we will use \",(0,i.jsx)(e.code,{children:\"custom.special_image\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Description\"}),\": Optionally add any additional information here about the field.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Content Type\"}),\": Choose \",(0,i.jsx)(e.code,{children:\"File\"}),\". This option allows you to select the \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/apps/metafields/types\",children:\"metafield type\"}),\" for your definition. A type defines what kind of information that a metadata definition can store. Metafield types have built-in validation and Liquid support.\"]}),`\n`]}),(0,i.jsxs)(e.p,{children:[\"Click on \",(0,i.jsx)(e.em,{children:\"Save\"}),\" to store the new metafield definition. You can leave the options in the \",(0,i.jsx)(e.em,{children:\"Validation\"}),\" section set to their default values.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/add-definition.jpg\",alt:\"add-definition\"})}),(0,i.jsx)(e.h3,{children:\"Step 2: Assigning the metafield to a product\"}),(0,i.jsxs)(e.p,{children:[\"Next, we will assign a metafield to a product by adding an additional image for a product. When you open the product editor in the admin, you will find the metafield section at the bottom of the page. If not all metafields are visible, click on \",(0,i.jsx)(e.em,{children:\"Show all\"}),\".\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/upload-file-to-metafield.jpg\",alt:\"Upload file to metafield editor.\"})}),(0,i.jsxs)(e.p,{children:[\"Upload an image that you want to display additionally with the product. In our example, we will use an image of \",(0,i.jsx)(e.a,{href:\"https://burst.shopify.com/photos/small-bedroom-with-shelving\",children:\"bedroom furniture\"}),\".\"]}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Positive\"}),(0,i.jsxs)(e.dd,{children:[\"If you need to find an image, you can use \",(0,i.jsx)(e.a,{href:\"https://burst.shopify.com/\",children:\"Burst\"}),\" to find free images.\"]})]}),(0,i.jsxs)(e.p,{children:[\"Click on \",(0,i.jsx)(e.em,{children:\"Save\"}),\" to finalize your changes.\"]}),(0,i.jsx)(e.h3,{children:\"Step 3: Update the theme to render the new metafield information\"}),(0,i.jsxs)(e.p,{children:[\"Metafields are also accessible as \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/liquid/objects\",children:\"Liquid objects\"}),\" in Shopify themes, by wrapping the full definition in curly brackets, like a typical Liquid object.\"]}),(0,i.jsxs)(e.p,{children:[\"As the last step in this section, you will add some Liquid code and HTML to your theme, that will allow us to display the image metafield we've set up. The fastest way to do this is to use the \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/themes/tools/code-editor\",children:\"internal code editor\"}),\".\"]}),(0,i.jsxs)(e.p,{children:[\"To access the code editor, navigate to the \",(0,i.jsx)(e.em,{children:\"Online Store\"}),\" sales channel in the menu on the left hand side and choose \",(0,i.jsx)(e.em,{children:\"Edit code\"}),\" in the \",(0,i.jsx)(e.em,{children:\"Action\"}),\" dropdown menu in the main content area.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/theme-editor-menu.jpg\",alt:\"The Theme Editor in the Shopify Admin.\"})}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Negative\"}),(0,i.jsx)(e.dd,{children:\"The code below was written for Dawn, the default development store theme. If you are using a different theme, you will need to make the appropriate changes.\"})]}),(0,i.jsxs)(e.p,{children:[\"Open the \",(0,i.jsx)(e.code,{children:\"Sections/main-product.liquid\"}),\" file and find the snippet that displays the product description on the product detail page.\"]}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-html\",children:[`{%- if product.description != blank -%}\n`,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-attr\",children:\"class\"}),\"=\",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"product__description rte\"'}),\"\u003e\"]}),\"{{ product.description }}\",(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\"\u003e\"]}),`\n{%- endif -%}\n`]})}),(0,i.jsx)(e.p,{children:\"Paste the following snippet directly underneath:\"}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-html\",children:[`{%- if product.metafields.custom.special_image != blank -%}\n`,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\"\u003e\"]}),`\n  `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"img\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-attr\",children:\"src\"}),\"=\",(0,i.jsx)(e.span,{className:\"hljs-string\",children:`\"{{ product.metafields.custom.special_image | img_url: '250x' }}\"`}),\" /\u003e\"]}),`\n`,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\"\u003e\"]}),`\n{%- endif -%}\n`]})}),(0,i.jsxs)(e.p,{children:[\"This snippet will render the additional product image. By using an \",(0,i.jsx)(e.code,{children:\"if\"}),\" statement, the additional image will only show if the metafield is set for that product. Also, note the use of the \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/liquid/filters#img_url\",children:\"img_url\"}),\" filter, in our case they will determine the dimensions of the image.\"]}),(0,i.jsx)(e.h3,{children:\"Step 4: Test it out in the online store\"}),(0,i.jsx)(e.p,{children:\"Now, when you navigate to the product detail page of your demo store, you should see the new additional image rendered.\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/product-detail-page.jpg\",alt:\"The product detail page with the additional image.\"})}),(0,i.jsx)(e.h3,{children:\"Expanding on the concept\"}),(0,i.jsx)(e.p,{children:\"We've shown just one example of how to use metafields to modify how your store looks and feels. There are hundreds of other ways to use metafields to customize your store.\"}),(0,i.jsxs)(e.p,{children:[\"For example, you could add a type \",(0,i.jsx)(e.em,{children:\"Color\"}),\" metafield definition to toggle certain CSS classes in your theme, which could then change the way a title or description appear.\"]})]})}),(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"3\",children:\"Use GraphiQL to create metafield definitions\"}),(0,i.jsx)(e.p,{children:`In this example, we will again create metafield definitions and populate them with data. However, this time we won't be using the Shopify Admin but instead using the Shopify API. By using the API you can set metafield definitions on thousands of products programmatically, a huge time-saver. Specifically, in this step we will learn how to use GraphQL mutations to create a basic \"recommended products\" feature, which lets you showcase similar or related products.`}),(0,i.jsx)(e.h3,{children:\"Step 1: Install the Shopify GraphiQL app\"}),(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/apps/tools/graphiql-admin-api\",children:\"Shopify GraphiQL app\"}),\" is a free app that allows you interact with the Admin and Storefront APIs of your store. It contains an easy-to-use editor for building the payload of your API calls along with a documentation and auto-completion feature. For our purposes, we will use GraphiQL to create new metafield definitions and product data we need for this example.\"]}),(0,i.jsxs)(e.p,{children:[\"To install the app \",(0,i.jsx)(e.a,{href:\"https://shopify-graphiql-app.shopifycloud.com/login\",children:\"click on this link\"}),\" and follow the instructions. Enter your \",(0,i.jsx)(e.strong,{children:\"Store URL\"}),\", choose the appropriate scopes, and click \",(0,i.jsx)(e.em,{children:\"Install\"}),\". You will need to log in to your Shopify store and grant the app access to your store.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/install-graphiql.jpg\",alt:\"The Shopify GraphiQL app.\"})}),(0,i.jsx)(e.h3,{children:\"Step 2: Creating a product recommendation metafield definition\"}),(0,i.jsxs)(e.p,{children:[\"We start by using the GraphiQL app to create a new metafield definition for storing one or more product recommendations. In this example, the GraphiQL app will make a GraphQL \",(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/admin-graphql/2022-01/mutations/metafieldDefinitionCreate\",children:\"metafieldDefinitionCreate\"}),\" mutation call to create a new metafield definition.\"]}),(0,i.jsxs)(e.p,{children:[\"To do so, start by launching the GraphiQL app. Make sure to have the \",(0,i.jsx)(e.em,{children:\"API Schema\"}),\" toggle switched to \",(0,i.jsx)(e.em,{children:\"Admin\"}),\" and choose the latest version from the \",(0,i.jsx)(e.em,{children:\"API version\"}),\" dropdown menu.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/create-metafield-graphiql.jpg\",alt:\"Create metafield via GraphiQL app\"})}),(0,i.jsx)(e.p,{children:\"Add the following payload to the top left window of the editor.\"}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-graphql\",children:[(0,i.jsx)(e.span,{className:\"hljs-keyword\",children:\"mutation\"}),\" CreateMetafieldDefinition\",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"(\"}),(0,i.jsx)(e.span,{className:\"hljs-variable\",children:\"$definition\"}),\": MetafieldDefinitionInput\",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"!\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\")\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n  metafieldDefinitionCreate`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"(\"}),(0,i.jsx)(e.span,{className:\"hljs-symbol\",children:\"definition\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-variable\",children:\"$definition\"}),\") \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n    createdDefinition `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n      id\n      name\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n    userErrors `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n      field\n      message\n      code\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`]})}),(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"$definition\"}),\" value is built by adding JSON into the \",(0,i.jsx)(e.em,{children:\"Query variables\"}),\" part of the GraphiQL app. It's located at the bottom left of the screen and might be collapsed when you first load the page.\"]}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-json\",children:[(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"definition\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"name\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"Recommendations\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"namespace\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"custom\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"key\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"recommendations\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"description\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"Recommended products\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"type\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"list.product_reference\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"ownerType\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"PRODUCT\"'}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`]})}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Positive\"}),(0,i.jsxs)(e.dd,{children:[\"Did you notice that these values are a lot like the ones we used in our previous exercise? They both have a \",(0,i.jsx)(e.em,{children:\"name\"}),\", \",(0,i.jsx)(e.em,{children:\"namespace\"}),\", \",(0,i.jsx)(e.em,{children:\"key\"}),\", and \",(0,i.jsx)(e.em,{children:\"type\"}),\".\"]})]}),(0,i.jsxs)(e.p,{children:[\"After the mutation has been made the new definition is also visible in the backend, from the \",(0,i.jsx)(e.em,{children:\"Settings\"}),\" \u003e \",(0,i.jsx)(e.em,{children:\"Metafields\"}),\" menu.\"]}),(0,i.jsx)(e.h3,{children:\"Step 3: Set a products' recommendation metafield\"}),(0,i.jsx)(e.p,{children:\"In this step we will populate the product recommendation metafield for a certain product.\"}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Negative\"}),(0,i.jsxs)(e.dd,{children:[\"Depending on your store, the ID of this product will be different than in this example. In our example, the ID is \",(0,i.jsx)(e.code,{children:\"gid://shopify/Product/766526115046\"}),\". To find the ID of any product, select a product from the product editor, the ID will be part of the URL.\"]})]}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-graphql\",children:[(0,i.jsx)(e.span,{className:\"hljs-keyword\",children:\"mutation\"}),\" metafieldsSet\",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"(\"}),(0,i.jsx)(e.span,{className:\"hljs-variable\",children:\"$metafields\"}),\": \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"[\"}),\"MetafieldsSetInput\",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"!\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"]\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"!\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\")\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n  metafieldsSet`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"(\"}),(0,i.jsx)(e.span,{className:\"hljs-symbol\",children:\"metafields\"}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-variable\",children:\"$metafields\"}),\") \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n    metafields `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n      key\n      namespace\n      value\n      createdAt\n      updatedAt\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n    userErrors `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n      field\n      message\n      code\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`]})}),(0,i.jsx)(e.p,{children:\"In the query variables section, we will pass variables which are necessary for the mutation, such as the main product and the recommended products.\"}),(0,i.jsxs)(e.p,{children:[\"First we include the main product ID (set in the \",(0,i.jsx)(e.code,{children:\"ownerId\"}),\" field), then the recommended product IDs (set in the \",(0,i.jsx)(e.code,{children:\"value\"}),\" field), and lastly, the type will be a list, so we set that to \",(0,i.jsx)(e.code,{children:\"list.product_reference\"}),\". Recommended products will be built using a comma-separated string of IDs.\"]}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-json\",children:[(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"metafields\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"[\"}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"{\"}),`\n      `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"key\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"recommendations\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n      `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"namespace\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"custom\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n      `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"ownerId\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"gid://shopify/Product/7665261150464\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n      `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"type\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"list.product_reference\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\",\"}),`\n      `,(0,i.jsx)(e.span,{className:\"hljs-attr\",children:'\"value\"'}),(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\":\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"[\\\\\"gid://shopify/Product/7900502065408\\\\\", \\\\\"gid://shopify/Product/7900503212288\\\\\"]\"'}),`\n    `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n  `,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"]\"}),`\n`,(0,i.jsx)(e.span,{className:\"hljs-punctuation\",children:\"}\"}),`\n`]})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/set-product-recommendation-metafields-graphiql.jpg\",alt:\"Setting the product recommendation metafields via GraphiQL app\"})}),(0,i.jsx)(e.p,{children:\"Running this mutation successfully will create a new metafield definition that you can see in both the API response in GraphiQL and in the admin Metafield menu.\"}),(0,i.jsx)(e.p,{children:\"Additionally, if you open the product in the Shopify Admin you'll also see the new product recommendations metafield.\"}),(0,i.jsxs)(e.dl,{children:[(0,i.jsx)(e.dt,{children:\"Positive\"}),(0,i.jsx)(e.dd,{children:'You might need to click on the \"Show all\" button to view all Metafields for a product. Alternatively, you can choose to pin certain Metafields to have them show up on the product page.'})]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/product-detail-page-product-recommendations.jpg\",alt:\"The product detail page with the product recommendations metafield.\"})}),(0,i.jsx)(e.h3,{children:\"Step 4: Displaying recommendations in the online store\"}),(0,i.jsx)(e.p,{children:\"Finally, we need to display the recommended products in the online store. To do that, we'll need to go back to the code editor.\"}),(0,i.jsxs)(e.p,{children:[\"Back in the \",(0,i.jsx)(e.code,{children:\"Sections/main-product.liquid\"}),\" file, insert the following code snippet below the code added from the previous step. The code will check if the metafield isn't empty and then iterate over the list of recommended products.\"]}),(0,i.jsx)(e.pre,{children:(0,i.jsxs)(e.code,{className:\"hljs language-html\",children:[`{%- if product.metafields.custom.recommendations != blank -%}\n  `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\"\u003e\"]}),`\n    `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"strong\"}),\"\u003e\"]}),\"Recommended products\",(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"strong\"}),\"\u003e\"]}),`\n      `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"ul\"}),\"\u003e\"]}),`\n        {% for product in product.metafields.custom.recommendations.value %}\n          `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"li\"}),\"\u003e\"]}),(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"a\"}),\" \",(0,i.jsx)(e.span,{className:\"hljs-attr\",children:\"href\"}),\"=\",(0,i.jsx)(e.span,{className:\"hljs-string\",children:'\"{{ product.url }}\"'}),\"\u003e\"]}),\"{{ product.title }}\",(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"li\"}),\"\u003e\"]}),`\n        {% endfor %}\n      `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"ul\"}),\"\u003e\"]}),`\n  `,(0,i.jsxs)(e.span,{className:\"hljs-tag\",children:[\"\u003c/\",(0,i.jsx)(e.span,{className:\"hljs-name\",children:\"div\"}),\"\u003e\"]}),`\n{%- endif -%}\n`]})}),(0,i.jsx)(e.h3,{children:\"Step 5: Test it out in the online store\"}),(0,i.jsx)(e.p,{children:\"Now, when you navigate to the product detail page of your demo store, you should see the new product recommendations.\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/product-page-with-recommendations.jpg\",alt:\"The product page with the product recommendations.\"})}),(0,i.jsx)(e.h3,{children:\"Expanding on the concept\"}),(0,i.jsx)(e.p,{children:\"We've shown how to set one metafield programmatically using GraphiQL. These same principles of calling an API with a client can be used to alter hundreds of metafields for thousands of products. Potentially saving you hours, days, or weeks of setting these fields manually.\"})]})}),(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"4\",children:\"Build Shopify Flow automation that reads metafields\"}),(0,i.jsxs)(e.p,{children:[\"In this section we will be using the \",(0,i.jsx)(e.a,{href:\"https://apps.shopify.com/flow\",children:\"Shopify Flow\"}),\" app to create automation which reads metafields. A typical use case for Shopify Flow would be to flag another team (with an email), when products (with certain metafield values), are ordered. For instance, if a product needs certain packaging to be shipped, we can use the metafield to flag the team that needs to be notified.\"]}),(0,i.jsx)(e.h3,{children:\"Step 1: Creating a boolean metafield\"}),(0,i.jsx)(e.p,{children:\"In this step we will create a Boolean metafield definition. We will be looking at this flag when we create our automation with Shopify Flow.\"}),(0,i.jsxs)(e.p,{children:[\"Go back to the Shopify admin and navigate to the \",(0,i.jsx)(e.em,{children:\"Settings\"}),\" menu and choose the \",(0,i.jsx)(e.em,{children:\"Metafields\"}),\" option. Create another \",(0,i.jsx)(e.em,{children:\"Product\"}),\" definition with the following properties:\"]}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Name\"}),\": In this example, we will use \",(0,i.jsx)(e.code,{children:\"Special Order\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Namespace\"}),\" and \",(0,i.jsx)(e.strong,{children:\"key\"}),\": In this example, we will use \",(0,i.jsx)(e.code,{children:\"custom.special_order\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Description\"}),\": Optionally add any additional information here about the field.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Content Type\"}),\": Choose the boolean option, \",(0,i.jsx)(e.code,{children:\"True/False\"}),\".\"]}),`\n`]}),(0,i.jsxs)(e.p,{children:[\"Click on \",(0,i.jsx)(e.em,{children:\"Save\"}),\" to store the new metafield definition.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/create-boolean-metafield.jpg\",alt:\"Create boolean metafield\"})}),(0,i.jsx)(e.h3,{children:\"Step 2: Add a boolean metafield to a product\"}),(0,i.jsxs)(e.p,{children:[\"Open a product in the product editor and scroll down to the \",(0,i.jsx)(e.em,{children:\"Metafields\"}),\" section. The new metafield definition, \",(0,i.jsx)(e.em,{children:\"Special Order\"}),\", will now be in the list of metafields. Set the \",(0,i.jsx)(e.em,{children:\"Special Order\"}),\" flag to \",(0,i.jsx)(e.strong,{children:\"True\"}),\" and save the changes.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/product-with-all-three.jpg\",alt:\"Product with boolean metafield\"})}),(0,i.jsx)(e.h3,{children:\"Step 3: Install Shopify Flow\"}),(0,i.jsxs)(e.p,{children:[\"Navigate to the Shopify App Store and install \",(0,i.jsx)(e.a,{href:\"https://apps.shopify.com/flow\",children:\"Shopify Flow\"}),\" app. After installed, navigate to the \",(0,i.jsx)(e.em,{children:\"Apps\"}),\" menu and select \",(0,i.jsx)(e.em,{children:\"Shopify Flow\"}),\".\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/install-shopify-flow.jpg\",alt:\"Install Shopify Flow\"})}),(0,i.jsx)(e.h3,{children:\"Step 4: Build a workflow\"}),(0,i.jsx)(e.p,{children:\"With Flow you can build workflows with triggers, conditions, and actions. We'll be creating a workflow that sends an email if an order is created that contains a product with the Boolean metafield set.\"}),(0,i.jsx)(e.h4,{children:\"Start building a new workflow\"}),(0,i.jsxs)(e.p,{children:[\"In order to create a new workflow, go to the Flow app in the app section of the admin and click on the \",(0,i.jsx)(e.em,{children:\"Create workflow\"}),\" button.\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/create-workflow.jpg\",alt:\"Create workflow\"})}),(0,i.jsx)(e.h4,{children:\"Define a trigger\"}),(0,i.jsxs)(e.p,{children:[\"The first step to creating a workflow is to define a trigger. From the trigger menu, select \",(0,i.jsx)(e.em,{children:\"Order created\"}),\".\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-trigger-order-created.jpg\",alt:\"Create a trigger based on orders being created\"})}),(0,i.jsx)(e.h4,{children:\"Create a condition\"}),(0,i.jsx)(e.p,{children:\"The next step is to create a condition.\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Click the plus icon on the bottom-right corner of the trigger box.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Choose \",(0,i.jsx)(e.strong,{children:\"Condition\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Set the options on the right to \",(0,i.jsx)(e.strong,{children:\"If all conditions are met\"}),\" and click on \",(0,i.jsx)(e.strong,{children:\"Add criteria\"}),\".\"]}),`\n`]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-condition-start.jpg\",alt:\"Start to create a condition\"})}),(0,i.jsxs)(e.p,{children:[\"Our condition will be based on the Boolean metafield \",(0,i.jsx)(e.em,{children:\"Special Order\"}),\" being set to \",(0,i.jsx)(e.strong,{children:\"True\"}),\". To do this we need to find the metafield definition in the menu.\"]}),(0,i.jsxs)(e.p,{children:[\"In the condition context menu, click on the following: \",(0,i.jsx)(e.strong,{children:\"Order\"}),\", \",(0,i.jsx)(e.strong,{children:\"LineItems\"}),\", \",(0,i.jsx)(e.strong,{children:\"Product\"}),\", \",(0,i.jsx)(e.strong,{children:\"Metafields\"}),\". We'll be setting conditions for \",(0,i.jsx)(e.strong,{children:\"key\"}),\", \",(0,i.jsx)(e.strong,{children:\"namespace\"}),\", and \",(0,i.jsx)(e.strong,{children:\"value\"}),\".\"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-condition.jpg\",alt:\"Find the metafield definition\"})}),(0,i.jsx)(e.p,{children:\"Set the following conditions:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"namespace\"}),\": Equal to \",(0,i.jsx)(e.code,{children:\"custom\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"key\"}),\": Equal to \",(0,i.jsx)(e.code,{children:\"special_order\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"value\"}),\": Equal to \",(0,i.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-condition-set.jpg\",alt:\"Set the conditions\"})}),(0,i.jsxs)(e.p,{children:[\"Now, Whenever there is a metafield with the namespace \",(0,i.jsx)(e.code,{children:\"custom\"}),\" and the key \",(0,i.jsx)(e.code,{children:\"special_order\"}),\" is set to \",(0,i.jsx)(e.code,{children:\"true\"}),\", the whole condition will be met.\"]}),(0,i.jsx)(e.h4,{children:\"Create an action\"}),(0,i.jsx)(e.p,{children:\"The final step is to create a condition.\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Click the plus icon on the bottom-right corner of the trigger box.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Choose \",(0,i.jsx)(e.strong,{children:\"Action\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Search for \",(0,i.jsx)(e.em,{children:\"email\"}),\" and choose the option \",(0,i.jsx)(e.strong,{children:\"Send internal email\"}),\".\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Fill in the form with an email address, subject, and a message body.\"}),`\n`]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-action-email.jpg\",alt:\"Create an action\"})}),(0,i.jsxs)(e.p,{children:[\"Finally, click \",(0,i.jsx)(e.strong,{children:\"Turn on workflow\"}),\" to activate the flow that you have just created.\"]}),(0,i.jsx)(e.p,{children:\"If the trigger, the condition, and action are set correctly, you should see this representation:\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-complete.jpg\",alt:\"workflow\"})}),(0,i.jsx)(e.h3,{children:\"Step 5: Verify the workflow runs successfully\"}),(0,i.jsx)(e.p,{children:\"It's now time to test the workflow. Place an order with a product that has the Boolean metafield set. If the workflow is set up correctly, you will receive an email with the subject and body from the workflow defined earlier.\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-email.jpg\",alt:\"flow email\"})}),(0,i.jsx)(e.p,{children:\"You can see the workflow status from within the flow app.\"}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/content/images/optimized/metafields-render-automate/flow-complete-dashboard.jpg\",alt:\"flow complete dashboard\"})})]})}),(0,i.jsx)(e.div,{className:\"workshop-step\",children:(0,i.jsxs)(e.section,{children:[(0,i.jsx)(e.h2,{id:\"5\",children:\"Conclusion\"}),(0,i.jsx)(e.p,{children:\"Congratulations! You've reached the end of the workshop. You've learned how to:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Create different types of metafield definitions.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Use the code editor to update Liquid templates to render metafield definitions.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Use GraphiQL to create a metafield definition.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Build automation that uses metafields in Shopify Flow.\"}),`\n`]}),(0,i.jsx)(e.p,{children:\"Want to keep learning about Metafields? Check out the following resources:\"}),(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://shopify.dev/apps/metafields\",children:\"Metafields overview\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/admin-graphql/2022-07/objects/metafield\",children:\"Metafield GraphQL Admin API reference.\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://shopify.dev/api/liquid/objects#metafield\",children:\"Metafield Liquid API reference\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.shopify.com/partners/blog/metafields\",children:\"How to work with Metafields when building Shopify themes blog post\"})}),`\n`]})]})})]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(h,t)})):h(t)}var S=v;function c(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return N(k);})();\n;return Component;","frontmatter":{"summary":"Learn how to use metafields to create and render information and leverage Shopify Flow to automate tasks.","id":"metafields-render-automate","status":"Published","categories":"shopify","feedback-link":"https://github.com/Shopify/workshops","title":"Create, render, and automate tasks with Metafields"},"trackingEnabled":true},"routes/workshops":null},"actionData":null,"errors":null},"future":{"v2_dev":false,"unstable_postcss":false,"unstable_tailwind":false,"v2_errorBoundary":false,"v2_headers":false,"v2_meta":false,"v2_normalizeFormMethod":false,"v2_routeConvention":false}};</script><script type="module" async="">import "/build/manifest-0FD511F1.js";
import * as route0 from "/build/root-TS7GWK7I.js";
import * as route1 from "/build/routes/workshops-YWZAAF22.js";
import * as route2 from "/build/routes/workshops/$workshopId-TCVFMZD7.js";
window.__remixRouteModules = {"root":route0,"routes/workshops":route1,"routes/workshops/$workshopId":route2};

import("/build/entry.client-J6TYPMOL.js");</script></body></html>